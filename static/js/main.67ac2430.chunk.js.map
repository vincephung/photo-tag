{"version":3,"sources":["images/img.jpg","images/alice.png","images/billy.png","images/joe.png","Components/WinnerModal.js","Components/database.js","Components/Canvas.js","Components/Nav.js","Components/Leaderboard.js","Components/App.js","serviceWorker.js","index.js"],"names":["module","exports","WinnerModal","props","id","className","type","name","value","userName","placeholder","onChange","getUserName","getTime","onClick","saveWinner","database","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","Canvas","useState","selectionBox","setSelectionBox","xClick","setXClick","yClick","setYClick","xBox","setXBox","yBox","setYBox","alice","foundAlice","billy","foundBilly","joe","foundJoe","modal","showModal","seconds","setSeconds","minutes","setMinutes","timer","setTimer","setuserName","boxStyles","React","useRef","displaySelectionBox","useEffect","current","style","color","left","top","checkAnswer","e","personClicked","target","collection","doc","get","then","snapshot","chosenPerson","data","answerXLocation","x","answerYLocation","y","interval","setInterval","clearInterval","totalSeconds","String","length","totalMinutes","Fragment","src","backgroundImg","alt","rect","getBoundingClientRect","Math","round","clientX","clientY","realXValue","clientWidth","realYValue","clientHeight","pageX","pageY","ref","preventDefault","add","time","alert","Nav","to","class","Leaderboard","scores","setScore","arr","docs","forEach","snap","push","map","score","key","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67ac2430.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img.b6641c0f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/alice.adf17479.png\";","module.exports = __webpack_public_path__ + \"static/media/billy.1f526c92.png\";","module.exports = __webpack_public_path__ + \"static/media/joe.eedceb83.png\";","import React from 'react';\n\nconst WinnerModal = (props) => {\n  return (\n    <div id=\"winnerModal\" className=\"modal\">\n      <div className=\"modal-content\">\n        <h3>Congratulations! You found everyone.</h3>\n        <label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={props.userName}\n            placeholder=\"Enter your name\"\n            onChange={props.getUserName}\n          ></input>\n        </label>\n        <p>Your time was {props.getTime()} minutes.</p>\n        <button onClick={props.saveWinner}>\n          Place yourself on the scoreboard\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default WinnerModal;\n","import * as firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nvar firebaseConfig = {\n  apiKey: 'AIzaSyDBd_0y6x2L-TLEc7KaWKy6fScxtSsELdc',\n  authDomain: 'photo-tag-27057.firebaseapp.com',\n  databaseURL: 'https://photo-tag-27057.firebaseio.com',\n  projectId: 'photo-tag-27057',\n  storageBucket: 'photo-tag-27057.appspot.com',\n  messagingSenderId: '1078049668823',\n  appId: '1:1078049668823:web:db29f5c892fa8adfdefa92',\n};\n// Initialize Firebase\nconst database = firebase.initializeApp(firebaseConfig);\n\nexport default database;\n","import React, { useState, useEffect } from 'react';\nimport backgroundImg from '../images/img.jpg';\nimport './canvas.css';\nimport WinnerModal from './WinnerModal';\nimport database from './database';\nconst db = database.firestore();\n\nconst Canvas = () => {\n  const [selectionBox, setSelectionBox] = useState(false);\n  const [xClick, setXClick] = useState(0);\n  const [yClick, setYClick] = useState(0);\n  const [xBox, setXBox] = useState(0);\n  const [yBox, setYBox] = useState(0);\n  const [alice, foundAlice] = useState(false);\n  const [billy, foundBilly] = useState(false);\n  const [joe, foundJoe] = useState(false);\n  const [modal, showModal] = useState(false);\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [timer, setTimer] = useState(true);\n  const [userName, setuserName] = useState('');\n\n  let boxStyles = React.useRef();\n\n  const handleClick = (e) => {\n    var rect = e.target.getBoundingClientRect();\n    var x = Math.round(e.clientX - rect.left); //x position within the element.\n    var y = Math.round(e.clientY - rect.top); //y position within the element.\n\n    //3000 is width of original image, 1899 is height\n    let realXValue = Math.round((x * 3000) / e.target.clientWidth);\n    let realYValue = Math.round((y * 1899) / e.target.clientHeight);\n\n    setXClick(realXValue);\n    setYClick(realYValue);\n\n    setXBox(e.pageX - 50);\n    setYBox(e.pageY - 50);\n\n    displaySelectionBox(xClick, yClick);\n  };\n\n  const displaySelectionBox = () => {\n    setSelectionBox(!selectionBox);\n  };\n\n  useEffect(() => {\n    if (selectionBox) {\n      boxStyles.current.style.color = 'red';\n      boxStyles.current.style.left = `${xBox}px`;\n      boxStyles.current.style.top = `${yBox}px`;\n    }\n  }, [selectionBox]);\n\n  const checkWinner = () => {\n    if (alice === true && billy === true && joe === true) {\n      setTimer(false);\n      return true;\n    }\n    return false;\n  };\n\n  const checkAnswer = (e) => {\n    let personClicked = e.target.id;\n\n    db.collection('people')\n      .doc(personClicked)\n      .get()\n      .then((snapshot) => {\n        let chosenPerson = snapshot.data();\n        let answerXLocation = chosenPerson.x;\n        let answerYLocation = chosenPerson.y;\n\n        let acceptedXStart = answerXLocation - 70;\n        let acceptedYStart = answerYLocation - 50;\n        let acceptedXEnd = answerXLocation + 70;\n        let acceptedYEnd = answerYLocation + 50;\n\n        let checkX = xClick >= acceptedXStart && xClick <= acceptedXEnd;\n        let checkY = yClick >= acceptedYStart && yClick <= acceptedYEnd;\n\n        //if user click is within range of actual target\n        if (checkX && checkY) {\n          if (personClicked === 'Alice') {\n            foundAlice(true);\n          } else if (personClicked === 'Billy') {\n            foundBilly(true);\n          } else {\n            foundJoe(true);\n          }\n          setSelectionBox(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    if (checkWinner()) {\n      showModal(true);\n    }\n  }, [alice, billy, joe]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds((seconds) => seconds + 1);\n      if (seconds === 60) {\n        setMinutes((minutes) => minutes + 1);\n        setSeconds(0);\n      }\n    }, 1000);\n    if (timer === false) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [seconds, timer]);\n\n  const getUserName = (e) => {\n    setuserName(e.target.value);\n  };\n\n  const saveWinner = (e) => {\n    e.preventDefault();\n\n    db.collection('winners').add({\n      name: userName,\n      time: getTime(),\n    });\n    showModal(false);\n    alert('Successfully added you to the leaderboard!');\n  };\n\n  const getTime = () => {\n    let totalSeconds =\n      String(seconds).length === 2 ? String(seconds) : `0${seconds}`;\n    let totalMinutes =\n      String(minutes).length === 2 ? String(minutes) : `0${minutes}`;\n    let totalTime = `${totalMinutes}:${totalSeconds}`;\n    return totalTime;\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"timer\">{getTime()}</div>\n      <div className=\"imgContainer\">\n        <img\n          src={backgroundImg}\n          alt=\"waldoBackground\"\n          onClick={handleClick}\n        ></img>\n        {selectionBox ? (\n          <div ref={boxStyles} className=\"selectionBox\">\n            <div className=\"selectArea\"></div>\n            {!alice ? (\n              <button className=\"answerBtn\" id=\"Alice\" onClick={checkAnswer}>\n                Alice\n              </button>\n            ) : null}\n            {!billy ? (\n              <button className=\"answerBtn\" id=\"Billy\" onClick={checkAnswer}>\n                Billy\n              </button>\n            ) : null}\n            {!joe ? (\n              <button className=\"answerBtn\" id=\"Joe\" onClick={checkAnswer}>\n                Joe\n              </button>\n            ) : null}\n          </div>\n        ) : null}\n        {modal ? (\n          <WinnerModal\n            saveWinner={saveWinner}\n            userName={userName}\n            getUserName={getUserName}\n            getTime={getTime}\n          />\n        ) : null}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Canvas;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport alice from '../images/alice.png';\nimport billy from '../images/billy.png';\nimport joe from '../images/joe.png';\n\nconst Nav = () => {\n  return (\n    <div className=\"topNav\">\n      <div className=\"links\">\n        <button>\n          <Link className=\"link\" to=\"/photo-tag\">\n            Home\n          </Link>\n        </button>\n        <button>\n          <Link className=\"link\" to=\"/leaderboards\">\n            Leaderboard\n          </Link>\n        </button>\n      </div>\n      <h1>Find these people!</h1>\n      <div className=\"images\">\n        <img src={alice} class=\"img\" alt=\"Alice\"></img>Alice\n        <img src={billy} class=\"img\" alt=\"Billy\"></img>Billy\n        <img src={joe} class=\"img\" alt=\"Joe\"></img>Joe\n      </div>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React, { useState, useEffect } from 'react';\nimport database from './database';\nimport '../index.css';\n\nconst Leaderboard = () => {\n  const [scores, setScore] = useState([]);\n  let arr = [];\n  const db = database.firestore();\n\n  useEffect(() => {\n    db.collection('winners')\n      .get()\n      .then((snapshot) => {\n        snapshot.docs.forEach((snap) => {\n          arr.push(snap);\n        });\n      })\n      .then(() => {\n        setScore(arr);\n      });\n  }, []);\n\n  return (\n    <React.Fragment>\n      <h1 className=\"leaderBoard\">Leaderboard</h1>\n      <div className=\"scoresContainer\">\n        <div className=\"score\">\n          {scores.map((score) => {\n            return (\n              <div className=\"card\" key={score.id}>\n                <h1>{score.data().name}</h1>\n                <div>{`Completed in ${score.data().time} minutes`} </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Leaderboard;\n","import React from 'react';\nimport Canvas from './Canvas';\nimport Nav from './Nav';\nimport Leaderboard from './Leaderboard';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport '../index.css';\n\nconst App = () => {\n  return (\n    <React.Fragment>\n      <Router>\n        <Nav />\n        <Switch>\n          <Route exact path=\"/photo-tag\">\n            <Canvas />\n          </Route>\n          <Route path=\"/leaderboards\">\n            <Leaderboard />\n          </Route>\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}